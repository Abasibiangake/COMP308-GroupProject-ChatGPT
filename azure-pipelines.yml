trigger:
  branches:
    exclude:
      - '*'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  jobs:
  - job: Build_and_Test
    displayName: 'Build and Test'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Install Node.js'

    - task: Npm@1
      inputs:
        command: 'install'
        workingDir: 'groupreact-chatgpt'
        verbose: false
      displayName: 'Install dependencies'
      
    - task: Npm@1
      inputs:
        command: 'custom'
        workingDir: 'groupreact-chatgpt'
        customCommand: 'run lint'
        verbose: false
      displayName: 'Run ESLint'

    - task: Npm@1
      inputs:
        command: 'custom'
        workingDir: 'groupreact-chatgpt'
        customCommand: 'run build'
        verbose: false
      displayName: 'Build project'

- stage: Deliver
  jobs:
  - job: Release
    displayName: 'Release to Azure'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Install Node.js'

    - task: Npm@1
      inputs:
        command: 'install'
        workingDir: 'groupreact-chatgpt'
        verbose: false
      displayName: 'Install dependencies'

    - task: Npm@1
      inputs:
        command: 'custom'
        workingDir: 'groupreact-chatgpt'
        customCommand: 'run build'
        verbose: false
      displayName: 'Build project'

    - script: |
        find . -type f -print0 | xargs -0 zip $(Build.ArtifactStagingDirectory)/group-react-chatgpt.zip
      displayName: 'Create artifact'

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish artifact'

    - task: Npm@1
      inputs:
        command: 'custom'
        workingDir: 'groupreact-chatgpt'
        customCommand: 'run deploy'
        verbose: false
      displayName: 'Deploy to Azure'

- stage: Deploy_to_Dev
  displayName: 'Mock Deploy to Dev Environment'
  dependsOn: Deliver
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: 'Deploy Artifact to Dev Environment'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: echo 'Mock Deploy to Dev Environment'
      displayName: 'Mock Deployment'

- stage: Deploy_to_QAT_ENV
  displayName: 'Mock Deploy to Qat Env Environment'
  dependsOn: Deliver
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: 'Deploy Artifact to Qat Env Environment'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: echo 'Mock Deploy to Qat Env Environment'
      displayName: 'Mock Deployment'

- stage: Deploy_to_Staging_ENV
  displayName: 'Mock Deploy to Staging Environment'
  dependsOn: Deliver
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: 'Deploy Artifact to Staging Environment'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: echo 'Mock Deploy to Staging Environment'
      displayName: 'Mock Deployment'

- stage: Deploy_to_production
  displayName: 'Mock Deploy to Production'
  dependsOn: Deliver
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: 'Deploy Artifact to Production'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: echo 'Mock Deploy to Production'
      displayName: 'Mock Deployment'